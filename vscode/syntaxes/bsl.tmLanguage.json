{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "BSL",
  "patterns": [
    {
      "match": "\\b(namespace|include namespace|exclude namespace|using)\\s+([_a-zA-Z]([_a-zA-Z0-9]|\\.)*)\\b",
      "captures": {
        "1": {
          "name": "keyword.control.bsl"
        },
        "2": {
          "name": "entity.name.class.bsl"
        }
      }
    },
    {
      "name": "keyword.control.bsl",
      "match": "\\b(namespace|as|using|if|else|while|do|for|foreach|enum|switch|case|break|default|continue|exit|const|var|fun|return|try|catch|throw|struct)\\b"
    },
    { "include": "#multiline-strings" },
    { "include": "#types" },
    { "include": "#constants" },
    { "include": "#functions" },
    { "include": "#builtins" },
    { "include": "#numbers" },
    { "include": "#structs" },
    { "include": "#variables" },
    { "include": "#strings" },
    { "include": "#line-comments" },
    { "include": "#block-comments" }
  ],
  "repository": {
    "multiline-strings": {
      "patterns": [
        {
          "name": "string.quoted.backtick.bsl",
          "begin": "`",
          "end": "`",
          "patterns": [
            {
              "name": "constant.character.escape.bsl",
              "match": "\\\\."
            },
            {
              "name": "constant.character.bsl",
              "begin": "\\$\\{",
              "end": "\\}",
              "patterns": [
                { "include": "#interpolated-expressions" }
              ]
            },
            {
              "match": "[^\\`\\$]+",
              "name": "string.quoted.backtick.bsl"
            }
          ]
        }
      ]
    },
    "interpolated-arrays": {
      "patterns": [
        {
          "name": "keyword.operator.bsl",
          "begin": "\\{",
          "end": "\\}",
          "patterns": [
            { "include": "#interpolated-expressions" }
          ]
        }
      ]
    },
    "interpolated-structs": {
      "patterns": [
        {
          "name": "entity.name.class.bsl",
          "match": "\\b([_a-zA-Z][_a-zA-Z0-9]*)\\b(?=\\s*\\{)"
        }
      ]
    },
    "interpolated-expressions": {
      "patterns": [
        { "include": "#line-comments" },
        { "include": "#block-comments" },
        { "include": "#types" },
        { "include": "#constants" },
        { "include": "#numbers" },
        { "include": "#functions" },
        { "include": "#builtins" },
        { "include": "#keywords" },
        { "include": "#strings" },
        { "include": "#interpolated-arrays" },
        { "include": "#interpolated-structs" },
        { "include": "#multiline-strings" },
        { "include": "#variables" },
        { "include": "#operators" }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.bsl",
          "match": "(\\+|\\-|\\*|\\/|%|\\/%|\\*\\*|\\^|\\&|\\||~|<<|>>|==|!=|<|>|<=|>=|<=>|\\+\\+|\\-\\-|\\?|:|::|=|,|\\(|\\)|\\{|\\})"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.bsl",
          "match": "\\b(bool|int|float|char|string|function|any)\\b"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.bsl",
          "match": "\\b(true|false|this|null|not|and|or|in|ref|unref|typeof|typeid)\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.bsl",
          "match": "\\b[_a-zA-Z][_a-zA-Z0-9]*\\s*(?=\\()"
        }
      ]
    },
    "builtins": {
      "patterns": [
        {
          "name": "support.function.bsl",
          "match": "\\b(print|println|read|readch|len|system|is_any|is_array|is_struct)\\b"
        }
      ]
    },
    "structs": {
      "patterns": [
        {
          "name": "entity.name.class.bsl",
          "patterns": [
            {
              "match": "\\bstruct\\s+([_a-zA-Z][_a-zA-Z0-9]*)\\b",
              "captures": {
                "1": {
                  "name": "entity.name.class.bsl"
                }
              }
            },
            {
              "match": "\\b([_a-zA-Z][_a-zA-Z0-9]*)\\b::",
              "captures": {
                "1": {
                  "name": "entity.name.class.bsl"
                }
              }
            },
            {
              "match": "(?<=:\\s*)\\b[_a-zA-Z][_a-zA-Z0-9]*\\b",
              "name": "entity.name.class.bsl"
            },
            {
              "match": "\\b([_a-zA-Z][_a-zA-Z0-9]*)\\b(?=\\s*\\{)",
              "name": "entity.name.class.bsl"
            }
          ]
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.bsl",
          "match": "\\b[_a-zA-Z][_a-zA-Z0-9]*\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.single.bsl",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.bsl",
              "match": "\\\\."
            },
            {
              "match": "[^\\\\']",
              "name": "string.quoted.single.bsl"
            }
          ]
        },
        {
          "name": "string.quoted.double.bsl",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.bsl",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.bsl",
          "patterns": [
            {
              "name": "constant.numeric.integer.bsl",
              "match": "\\b([0-9]+[fF]?|0b[01]+|0o[0-7]+|0d[0-9]+|0x[0-9a-fA-F]+)\\b"
            },
            {
              "name": "constant.numeric.float.bsl",
              "match": "\\b([0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fF]?|[0-9]+([eE][+-]?[0-9]+)[fF]?)\\b"
            }
          ]
        }
      ]
    },
    "line-comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.bsl",
          "match": "\\/\\/.*$"
        }
      ]
    },
    "block-comments": {
      "patterns": [
        {
          "name": "comment.block.bsl",
          "begin": "\\/\\*",
          "end": "\\*\\/",
          "patterns": [
            {
              "name": "constant.character.escape.bsl",
              "match": "\\\\."
            }
          ]
        }
      ]
    }
  },
  "scopeName": "source.bsl"
}
