%YAML 1.2
---
name: CP
scope: source.cp
file_extensions:
  - cp
uuid: 350738f7-61d3-46d0-8f13-da7092e8b443

patterns:
  - name: keyword.control.cplang
    match: \b(if|else|while|do|for|foreach|switch|case|break|default|continue|const|var|fun|return|try|catch|throw|struct)\b

  - name: keyword.control.cplang
    match: \b(namespace|as namespace|using)\s+([_a-zA-Z][_a-zA-Z0-9]*)\b
    captures:
      1: 
        name: keyword.control.cplang
      2:
        name: entity.name.namespace.cplang

  - name: storage.type.cplang
    match: \b(bool|int|float|char|string|any)\b

  - name: constant.language.cplang
    match: \b(true|false|null|not|and|or|in|ref|unref)\b

  - include: #numbers

  - include: #structs

  - name: entity.name.function.cplang
    match: \b[_a-zA-Z][_a-zA-Z0-9]*\s*(?=\()

  - include: #variables

  - include: #strings

  - include: #operators

  - name: comment.line.double-slash.cplang
    match: \/\\/.*$

  - name: comment.block.cplang
    begin: \/\*
    end: \*\/
    patterns:
      - name: constant.character.escape.cplang
        match: \\\.

repository:
  operators:
    patterns:
      - name: keyword.operator.cplang
        match: \b(\+|\-|\*|\/|%|\b\/%|\*\*|\^|\&|\||~|<<|>>|==|!=|<|>|<=|>=|<=>|\+\+|\-\-|:|::|=)\b

  structs:
    patterns:
      - name: entity.name.class.cplang
        patterns:
          - name: entity.name.class.cplang
            match: \bstruct\s+([_a-zA-Z][_a-zA-Z0-9]*)\b
            captures:
              1:
                name: entity.name.class.cplang
          - name: entity.name.class.cplang
            match: (?<=\bvar\s+[_a-zA-Z][_a-zA-Z0-9]*\s*:\s*)\b[_a-zA-Z][_a-zA-Z0-9]*\b
          - name: entity.name.class.cplang
            match: \b([_a-zA-Z][_a-zA-Z0-9]*)\b(?=\s*\{)

  variables:
    patterns:
      - name: variable.other.cplang
        match: \b[_a-zA-Z][_a-zA-Z0-9]*\b

  strings:
    patterns:
      - name: string.quoted.single.cplang
        begin: '
        end: '
        patterns:
          - name: constant.character.escape.cplang
            match: \\\.
          - name: string.quoted.single.cplang
            match: [^\\']

      - name: string.quoted.double.cplang
        begin: "
        end: "
        patterns:
          - name: constant.character.escape.cplang
            match: \\\.

      - name: string.quoted.backtick.cplang
        begin: `
        end: `
        patterns:
          - name: constant.character.escape.cplang
            match: \\\.
          - name: string.quoted.backtick.cplang
            begin: \${ 
            end: }
            patterns:
              - include: #operators
              - include: #variables
              - include: #strings
              - include: #numbers
              - include: #keywords
          - name: string.quoted.backtick.cplang
            match: [^`\${]+

  numbers:
    patterns:
      - name: constant.numeric.cplang
        patterns:
          - name: constant.numeric.integer.cplang
            match: \b([0-9]+[fF]?|0b[01]+|0o[0-7]+|0d[0-9]+|0x[0-9a-fA-F]+)\b
          - name: constant.numeric.float.cplang
            match: \b([0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fF]?|[0-9]+([eE][+-]?[0-9]+)[fF]?)\b
